#include <esp_wifi.h>
#include <esp_now.h>
#include <WiFi.h>

// Set the MASTER MAC Address
uint8_t masterAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
int packetReceived = 0;
bool SYNCED = false;

wifi_country_t country = {
    .cc = "JP",
    .schan = 1,
    .nchan = 14,
    .max_tx_power = 20,
    .policy = WIFI_COUNTRY_POLICY_AUTO,
};

esp_now_peer_info_t masterInfo;
// Define a data structure
typedef struct struct_message
{
    unsigned long time;
    unsigned int packetNumber;
} struct_message;
// Create a structured object
struct_message myData;

void turn_wifi_module_on();


void OnDataRecv(const uint8_t *mac, const uint8_t *incomingData, int len)
{
    packetReceived++;
    memcpy(&myData, incomingData, sizeof(myData));
    // Turn off wifi module
    esp_now_deinit();
    if(esp_wifi_stop() != ESP_OK) {
      Serial.println("Troubles with stop function");
    }
    Serial.println("---------GOT Packet!---------");
    Serial.print("Received #: ");
    Serial.print(packetReceived);
    Serial.print("\tData: ");
    Serial.print(myData.time);



    Serial.print("\tPacket  #: ");
    Serial.print(myData.packetNumber);
    Serial.print("\tLen: ");
    Serial.println(len);

    delay(8000); //Adjust   

    // Turn on wifi module
    turn_wifi_module_on();
    Serial.println("Woke up from delay!");
}

void turn_wifi_module_on() {
  // Set ESP32 as a Wi-Fi Station
    WiFi.mode(WIFI_STA);

    // Init ESP-NOW
    if (esp_now_init() != ESP_OK)
    {
        Serial.println("There was an error initializing ESP-NOW");
        return;
    }
    //Register the master
    memcpy(masterInfo.peer_addr, masterAddress, 6);
    masterInfo.channel = 14;
    esp_wifi_set_channel(14, WIFI_SECOND_CHAN_NONE);
    esp_wifi_set_country(&country);
    // Add master
    if (esp_now_add_peer(&masterInfo) != ESP_OK)
    {
        Serial.println("There was an error registering the master");
        return;
    }
    // Register callback function
    Serial.println("Module is on!");
}

void setup()  
{
    // Set up Serial Monitor
    Serial.begin(115200); 
    delay(1000); // take some time to open Serial Monitor 
    packetReceived = 0;
    
    // Set ESP32 as a Wi-Fi Station
    WiFi.mode(WIFI_STA);

    // Init ESP-NOW
    if (esp_now_init() != ESP_OK)
    {
        Serial.println("There was an error initializing ESP-NOW");
        return;
    }
    // Register the master
    memcpy(masterInfo.peer_addr, masterAddress, 6);
    masterInfo.channel = 14;
    esp_wifi_set_channel(14, WIFI_SECOND_CHAN_NONE);
    esp_wifi_set_country(&country);
    // Add master
    if (esp_now_add_peer(&masterInfo) != ESP_OK)
    {
        Serial.println("There was an error registering the master");
        return;
    }

    // Register callback function
    esp_now_register_recv_cb(OnDataRecv);

}

void loop()
{ 
}
